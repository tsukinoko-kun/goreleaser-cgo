name: Release

on:
  push:
    tags:
      - "*"

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            runner: ubuntu-24.04-arm
          - goos: windows
            goarch: amd64
            runner: windows-latest
          - goos: windows
            goarch: arm64
            runner: windows-11-arm
          - goos: darwin
            goarch: amd64
            runner: macos-15
          - goos: darwin
            goarch: arm64
            runner: macos-26
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Install Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true
      - name: Setup Windows ARM64 CGO toolchain
        if: matrix.goos == 'windows' && matrix.goarch == 'arm64'
        run: |
          choco install llvm
          # Create wrapper script to filter out -mthreads
          @"
          @echo off
          set args=%*
          set args=%args:-mthreads=%
          clang --target=aarch64-pc-windows-msvc %args%
          "@ | Out-File -FilePath "clang-wrapper.bat" -Encoding ASCII
          echo "CC=$((Get-Location).Path)\clang-wrapper.bat" >> $env:GITHUB_ENV
          echo "CXX=clang++ --target=aarch64-pc-windows-msvc" >> $env:GITHUB_ENV
      - name: Download Go dependencies
        run: go mod download
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: release --clean --split
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER }}
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.goos }}-${{ matrix.goarch }}-artifacts
          path: dist/*

  merge:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Install Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Merge and release
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: continue --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER }}
